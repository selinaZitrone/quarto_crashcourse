{
  "hash": "4eeb67590a653e49dabd1e223b5b3b9e",
  "result": {
    "markdown": "---\ntitle: \"Publishing Quarto documents\"\nsubtitle: \"A crashcourse on reproducible documents, presentations and websites\"\nformat: \n  revealjs:\n    footer: \"Selina Baldauf - Theoretical Ecology\"\n    highlight-style: printing\n    mainfont: Cabinet Grotesk\n    slide-number: true\n    show-slide-number: all\n    incremental: true\n    code-line-numbers: false\neditor: source\nexecute: \n  echo: false\n  eval: true\n---\n\n\n## Quarto pub\n\n- Publishing service provided by R Studio free of charge\n- For Websites but also single documents and presentations\n- Content is always public\n- Requirments:\n\n    - An account\n    - Quarto cli installed\n\n## Quarto pub\n\nPublish to Quarto pub from the terminal.\n\n- Open the terminal in R Studio (next to the console), and you should already be inside the project\n\n  - If not switch directories with `cd`\n\n**Publish a single document**\n\n``` bash\nquarto publish quarto-pub my_document.qmd\n```\n\n**Publish the whole project** (e.g. the website)\n\n``` bash\nquarto publish quarto-pub\n```\n\n## Quarto pub\n\n- The first time, the publish command will prompt you to log into your account\n- After publishing, your project will contain a `_publish.yml` file, that looks like this:\n\n```yml\n- source: project\n  quarto-pub:\n    - id: \"5f3abafe-68f9-4c1d-835b-9d668b892001\"\n      url: \"https://njones.quarto.pub/blog\"\n```\n\n## Github pages\n\n- Publish a website for every Github repository\n- Content is public\n- Only complete Websites not single documents\n\n- Requiremnts:\n  - Github account\n  - Projects needs to be a repository on Github\n  \n## Github pages\n\n**Step 1: Make your project a git repo**\n\n- Call `usethis::use_git()`\n- Commit all your files\n\n**Step 2: Make your project a github repo**\n\n- Call `usethis::use_github()`\n- Push your project to github\n\n## Option 1: Use `/docs` directory\n\n**Step 3: Render your website to `/docs`**\n\n- Open `_quarto.yaml` and specify the output directory for the webite to `docs` (by default it's `_site`)\n\n```yaml\nproject:\n  type: website\n  output-dir: docs\n```\n\n- Now build the website again\n- Push the docs folder to Github:\n\n```bash\ngit add docs/*\ngit commit -m \"render website\"\ngit push\n```\n\n## Option 1: Use `/docs` directory\n\n**Step 4: Turn on Github pages**\n\n- Go to your Github repo\n- Click on Settings on top:\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/4_publish/github_settings.jpg){width=50%}\n:::\n:::\n\n\n## Option 1: Use `/docs` directory\n\n- Scroll down to `Pages` and select that the website should be built from the `/docs` folder of the master branch\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/4_publish/github_pages_docs.jpg){width=50%}\n:::\n:::\n\n\n## Option 2: Use github actions\n\n- Github actions can be defined to run every time you push something\n- Trigger Github action to render and publish your website to github pages.\n\n**Step 1: Freeze Computations**\n\n- Freeze code execution -> Will only be executed locally\n- Add the following to `_quarto.yml`\n\n``` yaml\nexecute:\n  freeze: auto\n```\n\n## Option 2: Use github actions\n\n**Step 2: Rerender the site**\n\n- Now you should get a `_freeze` directory\n\n\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}