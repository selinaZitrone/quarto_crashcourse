{
  "hash": "a1785e7d209fa6ed95399873aa87c28f",
  "result": {
    "markdown": "---\ntitle: \"Introduction to Quarto\"\nsubtitle: \"A crashcourse on reproducible documents, presentations and websites\"\nformat: \n  revealjs:\n    footer: \"Selina Baldauf - Theoretical Ecology\"\n    highlight-style: printing\n    mainfont: Cabinet Grotesk\n    slide-number: true\n    show-slide-number: all\n    incremental: true\n    code-line-numbers: false\neditor: source\nexecute: \n  echo: false\n  eval: true\n---\n\n\n## Workshop overview\n\n. . .\n\n### Topics\n\n-   What is Quarto?\n-   Simple Quarto documents, presentations, websites\n-   How to publish your documents\n\n. . .\n\n### By the end of the crash course you will know ...\n\n-   ... if you want to use Quarto\n-   ... what you want to use it for\n-   ... where to get started\n\n## Before we get started I\n\n### Material\n\n-   Everything is done with Quarto\n-   Everything is on the [workshop website]()\n-   Download the *example project* from there, unzip it and open it in R Studio\n    -   Double click on the `.Rproj` file\n\n### Organization\n\n-   Some input and explanation from me\n-   Play with the example project\n-   Ask questions anytime\n-   We take breaks in between as we need\n\n## Before we get started II\n\nDid anyone have a problem with the preparation tasks?\n\n. . .\n\nWho already has experience with R Markdown or Markdown?\n\nPlease vote [here](https://www.menti.com/16z32xk9dk)\n\n# An introduction to Quarto\n\n## What is Quarto?\n\n> Quarto® is an open-source scientific and technical publishing system built on Pandoc\n\n- Built into R Studio (version July 2022) but also available as CLI\n- Possible document types and outputs to create with Quarto:\n\n  - Documents: Word, HTML, PDF, ...\n  - Presenations: HTML, Powerpoint\n  - Websites\n  - Books\n  - ...\n\n## What is Quarto?\n\nBasic idea: Write `.qmd` document then render desired output.\n\n. . .\n\n::: columns\n::: {.column width=\"45%\"}\n::: {layout=\"[[-1], [1], [-1]]\"}\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![A `.qmd` document written in R Studio](images/1_intro/basic_doc.jpg){fig-align='center'}\n:::\n:::\n\n:::\n:::\n\n::: {.column width=\"45%\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![The final document (here HTML)](images/1_intro/basic_doc_output.jpg)\n:::\n:::\n\n:::\n:::\n\n## What is the difference to R Markdown?\n\n. . .\n\nQuarto **unifies** and **extends** R Markdown:\n\n-   Most `.Rmd` can just be renamed `.qmd` and rendered with Quarto\n-   Same elements\n-   Same functions: e.g. quarto::quarto_render() instead of rmarkdown::render()\n-   Quarto combines power of R Markdown extension packages under unified syntax\n\n# The classic use case\n\n> Reproducible documents\n\n## A standard workflow\n\n::: columns\n::: {.column width=\"40%\"}\n\n![](images/1_intro/classic_workflow.png)\n:::\n\n::: {.column width=\"58%\"}\n::: nonincremental\nWorkflow can be\n\n-   error prone\n-   annoying to repeat\n:::\n:::\n:::\n\n. . .\n\nIf you have to repeat the analysis\n\n- Redo all figures and tables\n- Update document and presentation manually\n  - Manual copy pasting of values is very error prone\n- You probably have to repeat this several times\n\n## Solution: A workflow using Quarto\n\n**Basic idea:** Have everything (code, text, metadata) in one place. Let `Quarto` do the magic\n\n-   Run code and add output (e.g. figures and tables)\n\n-   Return a nice document of the desired output format\n\n. . .\n\n**Advantages** of this workflow:\n\n-   Easy to redo analysis\n-   No more copy pasting\n-   Reproducibility\n    -   Workflow that is independent of the person that wrote it (no clicking involved)\n-   Documentation/Text, Code & Output in one place\n\n## The basic workflow\n\n1.  **Create** an `.qmd` document\n\n2.  **Write** text and code (R, Python, Julia) into the document and define how the document should look like\n\n3.  **Render** the document to a defined output format using `Quarto`\n\n## Step 1 - Create document\n\nIt's easiest to start from a template.\n\nOpen R Studio and go to `File -> New File -> Quarto Document`\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/1_intro/new_quarto_doc.jpg)\n:::\n:::\n\n\n. . .\n\nJust click `Create` and the file will open in R Studio.\n\n## Step 2 - Write the document\n\n::: columns\n::: {.column width=\"60%\"}\n::: {layout=\"[[-1], [1], [-1]]\"}\n\n::: {.cell}\n::: {.cell-output-display}\n![](images/1_intro/basic_doc_annotate_sections.jpg)\n:::\n:::\n\n:::\n:::\n\n::: {.column width=\"38%\"}\nYou can edit:\n\n-   [YAML header]{style=\"color:#b31464\"}: Metadata and control of the output format\n-   [Markdown text]{style=\"color:#00abcd\"}: Formatted text body\n-   [Code chunks]{style=\"color:#ffcf01\"}: Python, R, Julia code\n:::\n:::\n\n## Step 3 - Render the document\n\n**Theoretically**\n\n\n::: {.cell}\n::: {.cell-output-display}\n![Artwork from \"Hello, Quarto\" keynote by Julia Lowndes and Mine Çetinkaya-Rundel,presented at RStudio Conference 2022. Illustrated by Allison Horst.](images/qmd_render_schema.png){fig-alt='A schematic representing rendering of Quarto documents from .qmd, to knitr or jupyter, to plain text markdown, then converted by pandoc into any number of output types including html, PDF, or Word document.' width=4522}\n:::\n:::\n\n\n## Step 3 - Render the document\n\n**Practically**\n\n::: nonincremental\n-   Click the `Render` button in R Studio\n-   Call the `quarto::quarto_render()` function\n-   In the terminal: `quarto render doc.qmd`\n:::\n\n# Basic Elements of a `.qmd` document\n\n> Text body, Code, YAML header\n\n## The text body\n\n-   Text body in Markdown syntax\n\n-   Markdown is simple markup language to create formatted text\n\n-   Quarto uses pandoc's markdown syntax\n\n    -   Find a full documentation [here](https://pandoc.org/MANUAL.html#pandocs-markdown)\n\n## The text body\n\n**The basics**\n\n-   Bold: `**text**` becomes **text**\n\n-   Italic: `*text*` becomes *text*\n\n-   Subscript: `H~3~PO~4~` becomes H<sub>3</sub>PO<sub>4</sub>\n\n-   Superscript: `Cu^2+^` becomes Cu<sup>2+</sup>\n\n## The text body\n\n**Headers**\n\n``` markdown\n# First level header\n\n## Second level header\n\n### Third level header\n```\n\n## The text body\n\n\n::: columns\n::: {.column width=\"\\\"45%\"}\n\n**Itemized lists**\n\n``` md\n- item 1\n  - another item\n- item 2\n- item 3\n```\n:::\n\n::: {.column width=\"\\\"45%\"}\n::: nonincremental\n- item 1\n  - another item\n- item 2\n- item3\n:::\n:::\n:::\n\n. . .\n\n\n::: columns\n::: {.column width=\"\\\"45%\"}\n\n**Numbered lists**\n\n``` md\n1. item 1\n2. item 2\n3. item 3\n```\n:::\n\n::: {.column width=\"\\\"45%\"}\n::: nonincremental\n1. item 1\n2. item 2\n3. item 3\n:::\n:::\n:::\n\n## The text body\n\n-   Links: `[text](link)`\n    -   `[RStudio](https://www.rstudio.com)` becomes [RStudio](https://www.rstudio.com)\n\n## The text body\n\nInclude **image** (from file/web): \n\n`![Figure caption](some/image)`\n\n. . .\n\n\n`![Quarto logo](images/quarto_straight.png)`\n\nbecomes\n\n\n::: {.cell .fig-cap-location-margin layout-align=\"center\"}\n::: {.cell-output-display}\n![Quarto logo](images/quarto_straight.png){fig-align='center' width=20%}\n:::\n:::\n\n\n## The text body\n\n**Footnote**: `^[a footnote]`\n\n. . .\n\nYou can learn more about Quarto online`^[A good place to start is the Quarto website]`\n\n. . . \n\nYou can learn more about Quarto online[^1]\n\n[^1]: A good place to start is the Quarto website\n\n<!-- ## The text body -->\n\n<!-- **Code blocks** -->\n\n<!-- ::: columns -->\n<!-- ::: {.column width=\"45%\"} -->\n<!--     ``` -->\n<!--     code -->\n<!--     ``` -->\n<!-- ::: -->\n\n<!-- ::: {.column width=\"45%\"} -->\n<!-- ``` markdown -->\n<!-- code -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: -->\n\n<!-- . . . -->\n\n<!-- Or highlighted for a specific language<br> -->\n\n<!-- ::: columns -->\n<!-- ::: {.column width=\"45%\"} -->\n<!--     ``` r -->\n<!--     library(palmerpenguins) -->\n<!--     plot(1:10, 1:10) -->\n<!--     ``` -->\n<!-- ::: -->\n\n<!-- ::: {.column width=\"45%\"} -->\n<!-- ``` r -->\n<!-- library(palmerpenguins) -->\n<!-- plot(1:10, 1:10) -->\n<!-- ``` -->\n<!-- ::: -->\n<!-- ::: -->\n\n\n\n## The text body\n\n**Math expressions** can be written in in LaTeX syntax\n\n. . .\n\n:::{.nonincremental}\n-   Inline (enclosed with `$`)\n:::\n\n`$f(k) = {n \\choose k} p^{k} (1-p)^{n-k}$` returns the function $f(k) = {n \\choose k} p^{k} (1-p)^{n-k}$ as an inline function\n\n. . .\n\n:::{.nonincremental}\n-   As a separate block (enclosed with `$$`)\n:::\n\n$$\nf(k) = {n \\choose k} p^{k} (1-p)^{n-k}\n$$\n\n## The text body\n\nAlways use spaces around markdown objects so that they can be rendered correctly, e.g.\n\n``` markdown\n## My section\n\nThis is an ordered list:\n\n1. item 1\n2. item 2\n```\n\ninstead of\n\n``` markdown\n## My section\nThis is an ordered list:\n1. item 1\n2. item 2\n```\n\n## The text body\n\nYou don't need to remember all of this. [Here](https://quarto.org/docs/authoring/markdown-basics.html) is a quick reference for the most important things.\n\n## The Code\n\nCode can be included in **code chunks** as **inline code**\n\n- Code chunks can contain any type of R/Python/Julia code\n- Code is (by default) executed and output is included in document\n  - Text output\n  - Figures\n  - ...\n\n\n## The Code\n\n**Inline code** starts and ends with 1 backtick\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n```\n`r `\n```\n:::\n:::\n\n\n. . .\n\n**Example**\n\n````md\nThe mean of the values 1, 2 and 3 is `r mean(1:3)`\n```` \n\nlooks like this:\n\nThe mean of the values 1, 2 and 3 is 2.\n\n## The Code\n\n**Code chunks** starts and ends with 3 backticks\n\n```` md\n```{{r}}\nlibrary(ggplot2)\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n```\n````\n<br>\n\n. . .\n\n````\n```{{python}}\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nr = np.arange(0, 2, 0.01)\ntheta = 2 * np.pi * r\nfig, ax = plt.subplots(subplot_kw = {'projection': 'polar'})\nax.plot(theta, r)\nax.set_rticks([0.5, 1, 1.5, 2])\nax.grid(True)\nplt.show()\n```\n````\n\n## The Code\n\n**Insert a code chunk**\n\n- Insert a code chunk by going to `Code` -> `Insert chunk`\n\n- Use the keyboard shortcut `Ctrl + Alt + I` / `Cmd + Option + I`\n\n- Inline chunks have to be typed\n\n## The Code\n\n**Run code chunk**\n\n- Code chunks are evaluated by `knitr` when rendering the document\n\n- Code chunks can also be run like normal R code\n\n- Run Code chunk by clicking on the green arrow next to the chunk\n\n. . .\n\n![](images/1_intro/run_code_chunk.png)\n\n## The code\n\nCode chunk have special comments that start with `#|`, e.g.\n\n```` md\n```{{r}}\n#| label: fig-airquality\n#| fig-cap: Temperature and ozone level.\n#| warning: false\n\nlibrary(ggplot2)\n\nggplot(airquality, aes(Temp, Ozone)) + \n  geom_point() + \n  geom_smooth(method = \"loess\")\n```\n````\n\n- `label`: Figure and the chunk a label that can be referred to in text\n- `fig-cap`: Figure caption\n- `warning`: Do not show warnigns that the code produces in the output\n\n## The code\n\nInteresting chunk options (i.e. species comments are) to control the output:\n\n- `eval`: `true/false`, Evaluate the chunk?\n- `echo`: `true/false`, Show source code in output?\n- `warning`: `true/false` Show warnings in output?\n- `include`: `true/false` is combination of `eval: true, echo: false, warning: false`\n\n## The code\n\nInteresting chunk options for figure output:\n\n- `label`: Label of the figure: has to start with `fig-`\n- `fig-cap`: Figure caption\n- `fig-align`: `default/left/right/center`\n- `out-width`: Output width in %\n\n## The code\n\nIntersting chunk options for table output:\n\n- `label`: Label of the figure: has to start with `tbl-`\n- `tbl-cap`: Table caption\n\n## Include image via code chunk\n\nInclude an image from a code chunk via `knitr::include_graphics()`. This gives\nyou more control over the image compared to `![Figure Caption](path/to/figure)`\n\n\n```` md\n```{{r}}\n#| echo: false\n#| out.width: \"20%\"\n#| fig-align: center\n#| fig-cap: Quarto logo\n#| fig-cap-location: margin\nknitr::include_graphics(\"images/quarto_straight.png\")\n```\n````\n\n\n::: {.cell .fig-cap-location-margin layout-align=\"center\"}\n::: {.cell-output-display}\n![Quarto logo](images/quarto_straight.png){fig-align='center' width=20%}\n:::\n:::\n\n\n## YAML header\n\n. . .\n\n**For Metadata**\n\n```yaml\n---\ntitle: \"My first document\"\nsubtitle: \"Whatever subtitle makes sense\"\nauthor: \"Selina Baldauf\"\ndate: \"`r Sys.Date()`\"\n---\n``` \n\n- Inline R code can print the current date at knitting time\n\n## YAML header\n\n**For document output formats**\n\n``` yaml\n---\nformat: html\n---\n```\n\n. . .\n\nYou can also specify multiple output formats\n\n``` yaml\n---\nformat: \n  html: default\n  pdf: default\n  docx: default\n---\n```\n\n# YAML header\n\n\n**For document options**\n\n:::{.columns}\n\n:::{.column width=\"45%\"}\n:::{.nonincremental}\n- Some options are shared between formats, some are specific to one format\n- Be careful to get the indentation right!\n:::\n:::\n\n:::{.column width=\"45%\"}\n\n```yaml\n---\ntitle: \"The penguins of Antarctica\"\nauthor: \"Selina Baldauf\"\ndate: \"2022-10-12\"\nformat: \n  html: \n    number-sections: true\n    toc: true\n    toc-location: left\n    code-fold: true\n    code-copy: true\n    df-print: kable\n  pdf: \n    toc: true\n    number-sections: true\n    df-print: kable\n  docx: default\n---\n```\n\n:::\n:::\n\n# YAML header\n\n**Execute options**\n\n- Default options for code chunks\n- Can be overwritten by local comments in code chunks\n\n. . .\n\n``` yaml\n---\nexecute: \n  echo: false\n  warning: false\n---\n```\n\n## References for all the elements\n\n- [Mardown syntax reference](https://quarto.org/docs/authoring/markdown-basics.html)\n- YAML header options:\n  - [HTML](https://quarto.org/docs/reference/formats/html.html)\n  - [PDF](https://quarto.org/docs/reference/formats/pdf.html)\n  - [DOCX](https://quarto.org/docs/reference/formats/docx.html)\n- Code chunks:\n  - [R code](https://quarto.org/docs/computations/r.html)\n  - [Python code](https://quarto.org/docs/computations/python.html)\n  ",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\r\n<script>\r\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\r\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\r\n  // slide changes (different for each slide format).\r\n  (function () {\r\n    function fireSlideChanged(previousSlide, currentSlide) {\r\n\r\n      // dispatch for htmlwidgets\r\n      const event = window.document.createEvent(\"Event\");\r\n      event.initEvent(\"slideenter\", true, true);\r\n      window.document.dispatchEvent(event);\r\n\r\n      // dispatch for shiny\r\n      if (window.jQuery) {\r\n        if (previousSlide) {\r\n          window.jQuery(previousSlide).trigger(\"hidden\");\r\n        }\r\n        if (currentSlide) {\r\n          window.jQuery(currentSlide).trigger(\"shown\");\r\n        }\r\n      }\r\n    }\r\n\r\n    // hookup for reveal\r\n    if (window.Reveal) {\r\n      window.Reveal.addEventListener(\"slidechanged\", function(event) {\r\n        fireSlideChanged(event.previousSlide, event.currentSlide);\r\n      });\r\n    }\r\n\r\n    // hookup for slidy\r\n    if (window.w3c_slidy) {\r\n      window.w3c_slidy.add_observer(function (slide_num) {\r\n        // slide_num starts at position 1\r\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\r\n      });\r\n    }\r\n\r\n  })();\r\n</script>\r\n\r\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}